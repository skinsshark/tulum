{"version":3,"sources":["images/jamaica.jpeg","images/raspericos.jpeg","images/hot-sauce.jpeg","images/tacos.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","selected","this","jamaica","sauce","tacos","raspericos","_this2","react_default","a","createElement","onClick","setState","width","src","highlightImageSelection","useMap","alt","name","title","coords","shape","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+SC2CzBC,6MAnCbC,MAAQ,CACNC,SAAU,+FAIV,OAAQC,KAAKF,MAAMC,UACjB,IAAK,UACH,OAAOE,IACT,IAAK,QACH,OAAOC,IACT,IAAK,QACH,OAAOC,IACT,QACE,OAAOC,sCAIJ,IAAAC,EAAAL,KACP,OACEM,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAMJ,EAAKK,SAAS,CAACX,SAAU,QAAQY,MAAM,SAASC,IAAKZ,KAAKa,0BAA2BC,OAAO,cAAcC,IAAI,eAClIT,EAAAC,EAAAC,cAAA,OAAKQ,KAAK,cACNV,EAAAC,EAAAC,cAAA,QAAMO,IAAI,UAAUN,QAAS,kBAAMJ,EAAKK,SAAS,CAACX,SAAU,aAAakB,MAAM,UAAUC,OAAO,kUAAkUC,MAAM,SACxab,EAAAC,EAAAC,cAAA,QAAMO,IAAI,YAAYN,QAAS,kBAAMJ,EAAKK,SAAS,CAACX,SAAU,WAAWkB,MAAM,YAAYC,OAAO,8RAA8RC,MAAM,SACtYb,EAAAC,EAAAC,cAAA,QAAMO,IAAI,QAAQN,QAAS,kBAAMJ,EAAKK,SAAS,CAACX,SAAU,WAAWkB,MAAM,cAAcC,OAAO,mIAAmIC,MAAM,SACzOb,EAAAC,EAAAC,cAAA,QAAMO,IAAI,QAAQN,QAAS,kBAAMJ,EAAKK,SAAS,CAACX,SAAU,WAAWkB,MAAM,aAAaC,OAAO,4UAA4UC,MAAM,SACjbb,EAAAC,EAAAC,cAAA,QAAMO,IAAI,QAAQN,QAAS,kBAAMJ,EAAKK,SAAS,CAACX,SAAU,WAAWkB,MAAM,mBAAmBC,OAAO,kUAAkUC,MAAM,kBA7BvaC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0f239e07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jamaica.aae4e914.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/raspericos.258f1db8.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/hot-sauce.65ef1765.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/tacos.8ef4bb8c.jpeg\";","import React, { Component } from 'react';\nimport './App.css';\nimport jamaica from './images/jamaica.jpeg';\nimport raspericos from './images/raspericos.jpeg';\nimport sauce from './images/hot-sauce.jpeg';\nimport tacos from './images/tacos.jpeg';\n\nclass App extends Component {\n  state = {\n    selected: null\n  }\n\n  highlightImageSelection() {\n    switch (this.state.selected) {\n      case 'jamaica':\n        return jamaica;\n      case 'sauce':\n        return sauce;\n      case 'tacos':\n        return tacos;\n      default:\n        return raspericos;\n    }\n  }\n\n  render() {\n    return (\n      <main>\n        <h1>TULUM</h1>\n        <p>click shit</p>\n        <img onClick={() => this.setState({selected: null})} width=\"3583px\" src={this.highlightImageSelection()} useMap=\"#raspericos\" alt=\"raspericos\" />\n        <map name=\"raspericos\">\n            <area alt=\"jamaica\" onClick={() => this.setState({selected: 'jamaica'})} title=\"jamaica\" coords=\"2127,1965,2067,1933,2013,1886,1975,1819,1966,1715,1962,1579,1966,1348,1950,1294,1950,1240,1975,1174,2013,1117,2083,1073,2140,1050,2254,1038,2339,1044,2437,1069,2519,1110,2589,1167,2646,1250,2671,1332,2665,1386,2652,1430,2624,1471,2602,1496,2535,1601,2504,1667,2440,1797,2390,1873,2358,1917,2317,1949,2266,1971,2206,1980\" shape=\"poly\" />\n            <area alt=\"hot sauce\" onClick={() => this.setState({selected: 'sauce'})} title=\"hot sauce\" coords=\"193,1098,120,1164,82,1215,54,1284,51,1348,73,1411,120,1471,190,1512,260,1531,348,1538,291,1639,298,1664,339,1664,383,1648,415,1623,453,1528,567,1487,646,1439,709,1383,756,1319,782,1247,788,1199,782,1155,760,1110,734,1079,696,1050,646,1025,592,1009,522,1000,456,1003,377,1016,285,1047\" shape=\"poly\" />\n            <area alt=\"taco1\" onClick={() => this.setState({selected: 'tacos'})} title=\"taco thing \" coords=\"2149,690,2051,731,1905,785,1842,848,1817,848,1722,892,1697,940,1649,962,1640,1031,1690,1054,1738,1044,1861,974,2193,794,2178,734\" shape=\"poly\" />\n            <area alt=\"taco2\" onClick={() => this.setState({selected: 'tacos'})} title=\"more tacos\" coords=\"3580,1345,3301,1303,3251,1322,3187,1322,3162,1386,3159,1446,3184,1465,3422,1496,3393,1506,3276,1500,3225,1503,3194,1588,3191,1626,3206,1648,3172,1648,3146,1750,3149,1765,3219,1778,3222,1810,3194,1816,3143,1797,3121,1832,3099,1892,3108,1980,3251,1996,3266,1920,3285,1854,3317,1806,3361,1765,3425,1737,3491,1718,3545,1712,3580,1712\" shape=\"poly\" />\n            <area alt=\"taco3\" onClick={() => this.setState({selected: 'tacos'})} title=\"we all had tacos\" coords=\"1953,2351,1928,2357,1909,2427,1858,2455,1855,2417,1823,2452,1814,2480,1801,2521,1773,2563,1738,2610,1687,2683,2311,2683,2326,2661,2295,2639,2295,2616,2288,2572,2263,2499,2197,2449,2162,2490,2070,2601,2013,2677,1956,2680,1988,2632,2032,2582,2051,2563,2073,2559,2070,2537,2048,2509,2070,2477,2073,2449,2064,2401,2016,2351\" shape=\"poly\" />\n        </map>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}